from django.contrib.auth import login, logout, authenticate
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect, get_object_or_404
from django.views.decorators.http import require_GET
from django.http import JsonResponse
from django.contrib import messages
from django.db import IntegrityError, OperationalError
from django.core.exceptions import ObjectDoesNotExist
from django.utils import timezone
from datetime import datetime, timedelta
from datetime import time as time_class
import logging
from django.contrib.auth import get_backends
from django.conf import settings

from telegram import Bot
import asyncio

from .models import Product, Category, Review, SpecialOffers, Table, TableBooking
from .forms import ReviewForm, CustomUserChangeForm, CustomAuthenticationForm, CustomUserCreationForm, TableBookingForm

logger = logging.getLogger(__name__)
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)


@require_GET
def get_free_tables(request):
    date_str = request.GET.get("date")
    time_str = request.GET.get("time")
    booking_type = request.GET.get("type")

    if not date_str or not time_str or not booking_type:
        return JsonResponse({"tables": []})

    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
        time_obj = datetime.strptime(time_str, "%H:%M").time()
    except ValueError:
        return JsonResponse({"tables": []})

    durations = {"DINNER": 90, "BANQUET": 300, "JUBILEE": 300}
    needed = durations.get(booking_type, 90)

    start_dt = timezone.make_aware(datetime.combine(date_obj, time_obj))
    end_dt = start_dt + timedelta(minutes=needed)

    all_tables = Table.objects.all()
    bookings = TableBooking.objects.filter(date=date_obj)

    def overlaps(start1, end1, start2, end2):
        return start1 < end2 and end1 > start2

    free_tables = []
    for table in all_tables:
        table_bookings = [b for b in bookings if b.table_id == table.id]
        if not any(overlaps(start_dt, end_dt, b.start_datetime, b.end_datetime) for b in table_bookings):
            free_tables.append({"id": table.id, "number": table.number})

    return JsonResponse({"tables": free_tables})


@require_GET
def get_availability(request):
    date_str = request.GET.get("date")
    booking_type = request.GET.get("type")

    if not date_str or not booking_type:
        return JsonResponse({"blocked_intervals": [], "full_blocked": False})

    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        return JsonResponse({"blocked_intervals": [], "full_blocked": False})

    durations = {"DINNER": 90, "BANQUET": 300, "JUBILEE": 300}
    needed = durations.get(booking_type, 90)

    all_tables = list(Table.objects.all())
    bookings = TableBooking.objects.filter(date=date_obj)

    step = 15
    day_start_minutes = 9 * 60
    day_end_minutes = 23 * 60

    blocked_intervals = []
    full_blocked = True

    def overlaps(start1, end1, start2, end2):
        return start1 < end2 and end1 > start2

    for t in range(day_start_minutes, day_end_minutes - needed + 1, step):
        interval_start = timezone.make_aware(datetime.combine(date_obj, time_class(t // 60, t % 60)))
        interval_end = interval_start + timedelta(minutes=needed)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –æ–Ω –Ω–∞ –≤–µ—Å—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
        free_table_found = False

        for table in all_tables:
            # –ë–µ—Ä—ë–º –≤—Å–µ –±—Ä–æ–Ω–∏ —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞ –Ω–∞ –¥–µ–Ω—å
            table_bookings = [b for b in bookings if b.table_id == table.id]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            if not any(overlaps(interval_start, interval_end, b.start_datetime, b.end_datetime) for b in table_bookings):
                # –ù–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å—Ç–æ–ª–∏–∫ –Ω–∞ –≤–µ—Å—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
                free_table_found = True
                break

        if free_table_found:
            full_blocked = False
        else:
            # –í—Å–µ —Å—Ç–æ–ª–∏–∫–∏ –∑–∞–Ω—è—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª
            blocked_intervals.append({
                "start": interval_start.strftime("%H:%M"),
                "end": interval_end.strftime("%H:%M"),
            })

    return JsonResponse({
        "blocked_intervals": blocked_intervals,
        "full_blocked": full_blocked,
    })


def home(request):

    if request.method == "POST":
        form = TableBookingForm(request.POST)
        if form.is_valid():
            table_booking = form.save(commit=False)
            table_booking.user = request.user
            table_booking.save()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            chat_id = settings.TELEGRAM_CHAT_ID

            message_text = (
                f"üìÖ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n\n"
                f"–¢–∏–ø: {table_booking.get_booking_type_display()}\n"
                f"–î–∞—Ç–∞: {table_booking.date}\n"
                f"–í—Ä–µ–º—è: {table_booking.time}\n"
                f"–°—Ç–æ–ª–∏–∫: #{table_booking.table.number}\n"
                f"–ì–æ—Å—Ç–µ–π: {table_booking.guests_count}"
            )
            
            # try:
            #     loop = asyncio.new_event_loop()
            #     asyncio.set_event_loop(loop)
            #     loop.run_until_complete(bot.send_message(chat_id, message_text))
            # except Exception as e:
            #     logger.error(f"–û—à–∏–±–∫–∞ Telegram-–±–æ—Ç–∞: {e}")
                     
            return redirect('thanks')
    else:
        form = TableBookingForm()


    try:
        categories = Category.objects.all()
        products = Product.objects.all()
        tables = Table.objects.all()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏—Å—å –∏ –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        current_time = timezone.now()
        specials = SpecialOffers.objects.filter(date_starting__lte=current_time, date_ending__gte=current_time)

        return render(request, "main/home.html", {
            "categories": categories,
            "products": products,
            "specials": specials,
            "form": form,
            "tables": tables,
        })
    except OperationalError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        messages.error(request, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return redirect("home")


def product_detail(request, product_id):
    try:
        product = get_object_or_404(Product, id=product_id)
        reviews = product.reviews.all().order_by("-created_at")
        user_review = None  # –û—Ç–∑—ã–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        form = None

        if request.user.is_authenticated:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –æ—Ç–∑—ã–≤ –∫ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
            user_review = product.reviews.filter(user=request.user).first()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
            if request.method == "POST":
                # –ï—Å–ª–∏ —ç—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
                if "delete_review" in request.POST and user_review:
                    user_review.delete()
                    messages.success(request, "–í–∞—à –æ—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω.")
                    return redirect("product_detail", product_id=product.id)
                else:
                    # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ (instance=user_review)
                    form = ReviewForm(request.POST, instance=user_review)
                    if form.is_valid():
                        review = form.save(commit=False)
                        review.user = request.user
                        review.product = product
                        review.save()
                        messages.success(request, "–í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
                        return redirect("product_detail", product_id=product.id)
                    else:
                        messages.error(request, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã.")
            else:
                # GET-–∑–∞–ø—Ä–æ—Å: –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –∫ user_review
                form = ReviewForm(instance=user_review)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ñ–æ—Ä–º–∞ –Ω–µ –Ω—É–∂–Ω–∞
            form = None

        return render(request, "main/product_detail.html", {
            "product": product,
            "reviews": reviews,
            "form": form,
            "user_review": user_review,
        })

    except ObjectDoesNotExist:
        messages.error(request, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return redirect("home")
    except Exception as e:
        messages.error(request, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return redirect("home")


def register(request):
    try:
        if request.method == "POST":
            form = CustomUserCreationForm(request.POST)
            if form.is_valid():
                user = form.save()
                login(request, user)
                messages.success(request, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")
                return redirect("home")
            else:
                messages.error(request, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        else:
            form = CustomUserCreationForm()
        return render(request, "main/register.html", {"form": form})

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        messages.error(request, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return redirect("home")

def user_login(request):
    try:
        if request.method == "POST":
            form = CustomAuthenticationForm(request, data=request.POST)
            if form.is_valid():
                user = form.get_user()
                login(request, user)
                messages.success(request, "–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")
                return redirect("home")
            else:
                messages.error(request, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        else:
            form = CustomAuthenticationForm()
        return render(request, "main/login.html", {"form": form})

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        messages.error(request, "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return redirect("home")



@login_required
def user_logout(request):
    try:
        logout(request)
        messages.success(request, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
        messages.error(request, "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return redirect("home")

@login_required
def profile(request):
    try:
        user = request.user  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if request.method == "POST":
            form = CustomUserChangeForm(request.POST, instance=user)
            if form.is_valid():
                form.save()
                messages.success(request, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                return redirect("profile")
            else:
                messages.error(request, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            form = CustomUserChangeForm(instance=user)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        return render(request, "main/profile.html", {"form": form})

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ profile: {e}")
        messages.error(request, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return redirect("profile")


@login_required
def delete_account(request):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if request.method == "POST":
        user = request.user
        user.delete()
        messages.success(request, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω.")
        return redirect("home")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é

    return render(request, "main/delete_account.html")
    

def about(request):
    return render(request, "main/about.html")

def contacts(request):
    return render(request, "main/contacts.html")

def thanks(request):
    return render(request, "main/thanks.html")

def menu(request):
    try:
        categories = Category.objects.prefetch_related('products').all()

        return render(request, "main/menu.html", {
            "categories": categories,
        })
    except OperationalError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        messages.error(request, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return redirect("home")
    

def custom_404(request, exception):
    return render(request, "404.html", status=404)